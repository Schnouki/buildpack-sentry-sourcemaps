#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$(cd "$3/" && pwd)

for key in SOURCEMAP_DIR SOURCEMAP_SENTRY_TOKEN SOURCEMAP_SENTRY_PROJECT SOURCEMAP_SENTRY_ORG SOURCEMAP_REPO SOURCEMAP_URL_PREFIX; do
    [[ -f "${env_dir}/${key}" ]] && export "$key=$(cat "${env_dir}/${key}")"
    [[ -z "${!key}" ]] && echo "-----> ${key} is missing or empty: unable to continue." && exit 1
done

# Prepare what we need
JQ="${cache}/sentry-jq"
if [[ ! -f "${JQ}" ]]; then
    echo "-----> Downloading jq 1.5"
    curl -sSfL "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" > "${JQ}"
    chmod +x "${JQ}"
fi

API="https://sentry.io/api/0/organizations/${SOURCEMAP_SENTRY_ORG}"

# Create a release
echo "-----> Creating Sentry release ${SOURCE_VERSION} for project ${SOURCEMAP_SENTRY_PROJECT}"

curl -sSf "${API}/releases/" \
  -X POST \
  -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
  -H 'Content-Type: application/json' \
  -d "
  {
    \"version\": \"${SOURCE_VERSION}\",
    \"ref\": \"${SOURCE_VERSION}\",
    \"projects\": [\"${SOURCEMAP_SENTRY_PROJECT}\"]
  }
  "
  >/dev/null

# Retrieve files
files=$(mktemp)
echo "       Retrieving existing files to $files"
curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
     -X GET \
     -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
     > "$files"

# Upload the sourcemaps
cd "${build}/${SOURCEMAP_DIR}"
for map in {*.js,*.js.map}
do
    if [ "$map" = "*.js" ] || [ "$map" = "*.js.map" ]; then
      continue
    fi

    sum=$(sha1sum "${map}" | cut -c -40)
    name="${SOURCEMAP_URL_PREFIX}${map}"
    res=($(${JQ} -r ". | map(select(.name == \"${name}\")) | first | .id + \" \" + (.sha1 // \"\")" "${files}"))

    if [[ "${res[0]}" == "" ]]; then
        echo "       Uploading ${map} to Sentry"
        curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
             -X POST \
             -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
             -F file=@"${map}" \
             -F name="${name}" \
             >/dev/null

    elif [[ "${res[1]}" != "${sum}" ]]; then
        echo "       Updating ${map} on Sentry"
        curl -sSf "${API}/releases/${SOURCE_VERSION}/files/${res[0]}/" \
             -X DELETE \
             -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
             >/dev/null
        curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
             -X POST \
             -H "Authorization: Bearer ${SOURCEMAP_SENTRY_TOKEN}" \
             -F file=@"${map}" \
             -F name="${name}" \
             >/dev/null

    else
        echo "       ${map} is up-to-date"
    fi
done

rm "${files}"

echo "       Done!"
